package laprecordtracker.test;
// Generated by ComTest BEGIN
import laprecordtracker.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2023.05.12 14:16:14 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KierrosajatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa39 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa39() throws SailoException {    // Kierrosajat: 39
    Kierrosajat kierrosajat = new Kierrosajat(); 
    Kierrosaika zonda1 = new Kierrosaika(), zonda2 = new Kierrosaika(); 
    assertEquals("From: Kierrosajat line: 43", 0, kierrosajat.getLkm()); 
    kierrosajat.lisaa(zonda1); assertEquals("From: Kierrosajat line: 44", 1, kierrosajat.getLkm()); 
    kierrosajat.lisaa(zonda2); assertEquals("From: Kierrosajat line: 45", 2, kierrosajat.getLkm()); 
    kierrosajat.lisaa(zonda1); assertEquals("From: Kierrosajat line: 46", 3, kierrosajat.getLkm()); 
    assertEquals("From: Kierrosajat line: 47", zonda1, kierrosajat.anna(0)); 
    assertEquals("From: Kierrosajat line: 48", zonda2, kierrosajat.anna(1)); 
    assertEquals("From: Kierrosajat line: 49", zonda1, kierrosajat.anna(2)); 
    assertEquals("From: Kierrosajat line: 50", false, kierrosajat.anna(1) == zonda1); 
    assertEquals("From: Kierrosajat line: 51", true, kierrosajat.anna(1) == zonda2); 
    kierrosajat.lisaa(zonda1); assertEquals("From: Kierrosajat line: 52", 4, kierrosajat.getLkm()); 
    kierrosajat.lisaa(zonda1); assertEquals("From: Kierrosajat line: 53", 5, kierrosajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa73 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa73() throws SailoException, CloneNotSupportedException {    // Kierrosajat: 73
    Kierrosajat kierrosajat = new Kierrosajat(); 
    Kierrosaika aika1 = new Kierrosaika(), aika2 = new Kierrosaika(); 
    aika1.rekisteroi(); aika2.rekisteroi(); 
    assertEquals("From: Kierrosajat line: 79", 0, kierrosajat.getLkm()); 
    kierrosajat.korvaaTaiLisaa(aika1); assertEquals("From: Kierrosajat line: 80", 1, kierrosajat.getLkm()); 
    kierrosajat.korvaaTaiLisaa(aika2); assertEquals("From: Kierrosajat line: 81", 2, kierrosajat.getLkm()); 
  } // Generated by ComTest END
}